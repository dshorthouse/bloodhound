= haml :'partials/user/twitter_img', layout: false

- content_for(:title, "#{@viewed_user.fullname}")

- content_for :stylesheets do
  - if @viewed_user.is_public? && ( @stats[:countries][:recorded].count > 0 || @stats[:countries][:identified].count > 0 )
    %link{rel:"stylesheet", href:"/css/jquery-jvectormap-2.0.3.css"}

- content_for :scripts do
  - if @viewed_user.is_public?
    %script{src: "/js/progress-bar.js"}
    :javascript
      $(function() {
        ProgressBar.init("#{@viewed_user.identifier}");
      });

  %script{id:"dsq-count-scr", src:"//#{Settings.disqus_shortname}.disqus.com/count.js", defer: ""}

  - if @viewed_user.is_public? && ( @stats[:countries][:recorded].count > 0 || @stats[:countries][:identified].count > 0 )
    %script{src: "/js/jquery-jvectormap-2.0.3.min.js"}
    %script{src: "/js/jquery-jvectormap-world-mill.js"}
    :javascript
      var countriesRecorded = #{@stats[:countries][:recorded].to_json},
          countriesIdentified = #{@stats[:countries][:identified].to_json};

      $(function() {
        DISQUSWIDGETS.getCount({reset: true});

        function regionValues(src, type) {
          return Object.keys(src).reduce(function (result,item) {
            result[item] = src[item][type];
            return result;
          }, {});
        }

        function regionTip(src, type, el, code) {
          var count = 0;
          if (src.hasOwnProperty(code)) {
            count = src[code][type];
          }
          if (count > 0) {
            el.removeClass("jvectormap-tip-hidden").html(el.html()+' ('+count+')');
          } else {
            el.addClass("jvectormap-tip-hidden");
          }
        }

        function regionOver(map, src, code) {
          if (!src.hasOwnProperty(code)) {
            var obj = map.vectorMap('get','mapObject');
            obj.regions[code].element.config.style.hover.cursor = "normal";
            obj.regions[code].element.config.style.hover["stroke-width"] = 0;
            obj.regions[code].element.config.style.hover["fill-opacity"] = 1.0;
          }
        }

        function regionClick(src, code) {
          if (src.hasOwnProperty(code)) {
            window.location = "/#{@viewed_user.identifier}/specimens/country/" + code;
          }
        }

        if (Object.keys(countriesRecorded).length > 0) {
          var map_collected = $('#map-collected');
          map_collected.vectorMap({
            map: 'world_mill',
            backgroundColor: '#fff',
            regionStyle: {
              initial: {
                fill: "#e9ecef"
              },
              hover: {
                cursor: "pointer",
                stroke: "#D3633C",
                "stroke-width": 1
              }
            },
            focusOn: Object.keys(countriesRecorded),
            series: {
              regions: [{
                values: regionValues(countriesRecorded, 'recorded'),
                scale: ['#C8EEFF', '#0071A4'],
                normalizeFunction: 'polynomial'
              }]
            },
            onRegionTipShow: function(e, el, code) {
              regionTip(countriesRecorded, 'recorded', el, code);
            },
            onRegionOver: function(e, code) {
              regionOver(map_collected, countriesRecorded, code);
            },
            onRegionClick: function(e, code) {
              regionClick(countriesRecorded, code);
            }
          });
        }
        if (Object.keys(countriesIdentified).length > 0) {
          var map_identified = $('#map-identified');
          map_identified.vectorMap({
            map: 'world_mill',
            backgroundColor: '#fff',
            regionStyle: {
              initial: {
                fill: "#e9ecef"
              },
              hover: {
                cursor: "pointer",
                stroke: "#D3633C",
                "stroke-width": 1
              }
            },
            focusOn: Object.keys(countriesIdentified),
            series: {
              regions: [{
                values: regionValues(countriesIdentified, 'identified'),
                scale: ['#C8EEFF', '#0071A4'],
                normalizeFunction: 'polynomial'
              }]
            },
            onRegionTipShow: function(e, el, code) {
              regionTip(countriesIdentified, 'identified', el, code);
            },
            onRegionOver: function(e, code) {
              regionOver(map_identified, countriesIdentified, code);
            },
            onRegionClick: function(e, code) {
              regionClick(countriesIdentified, code);
            }
          });
        }

      });

%div{class:"row"}
  = haml :'partials/user/jumbotron', layout: false
  %div{class:"col-12 col-lg-8 mt-2"}
    - if @viewed_user.is_public?
      = haml :'partials/user/tabs', layout: false, locals: { active_page: "overview" }

      %div{class:"d-flex flex-row mt-3 alert alert-info justify-content-between"}
        - if @stats[:specimens][:identified] == 0 && @stats[:specimens][:recorded] == 0 && @stats[:attributions][:helped] == 0
          Claims or attributions have not yet been recorded.
        - else
          %div
            %ul{class:"list-unstyled"}
              - if @stats[:specimens][:identified] > 0
                %li Identified #{number_with_delimiter(@stats[:specimens][:identified])} #{'specimen'.pluralize(@stats[:specimens][:identified])} from at least #{number_with_delimiter(@stats[:countries][:identified].count)} #{'country'.pluralize(@stats[:countries][:identified].count)}
              - if @stats[:specimens][:recorded] > 0
                %li Collected #{number_with_delimiter(@stats[:specimens][:recorded])} #{'specimen'.pluralize(@stats[:specimens][:recorded])} from at least #{number_with_delimiter(@stats[:countries][:recorded].count)} #{'country'.pluralize(@stats[:countries][:recorded].count)}
              - if @stats[:attributions][:helped] > 0
                %li Attributed #{number_with_delimiter(@stats[:attributions][:number])} #{'specimen'.pluralize(@stats[:attributions][:number])} to #{number_with_delimiter(@stats[:attributions][:helped])} #{'person'.pluralize(@stats[:attributions][:helped])}
              - if @stats[:articles][:number] > 0
                %li #{number_with_delimiter(@stats[:articles][:specimens_cited])} #{'specimen'.pluralize(@stats[:articles][:specimens_cited])} used in #{number_with_delimiter(@stats[:articles][:number])} published #{'work'.pluralize(@stats[:articles][:number])}
          - if @stats[:specimens][:recorded] > 0 || @stats[:specimens][:identified] > 0
            %div{class:"col-4 col-md-2"}
              Progress
              %div{class:"progress", style:"border:1px solid rgba(0,0,0,.125);inline"}
                %div{id:"progress-bar_#{@viewed_user.identifier}", class:"progress-bar bg-info", role:"progressbar", style:"width: 0%;inline", "aria-valuenow":"0", "aria-valuemin":"0", "aria-valuemax":"100"}

      - if @stats[:countries][:identified].count > 0 || @stats[:countries][:recorded].count > 0
        %div{class:"row d-flex mt-3"}
          - split_css = ""
          - if @stats[:countries][:identified].count > 0 && @stats[:countries][:recorded].count > 0
            - split_css = " col-md-6"
          - if @stats[:countries][:identified].count > 0
            %div{class:"col-10#{split_css}"}
              %h4 Identified From
              #map-identified{style:"width: 100%; height: 350px"}
          - if @stats[:countries][:recorded].count > 0
            %div{class:"col-10#{split_css}"}
              %h4 Collected From
              #map-collected{style:"width: 100%; height: 350px"}

    - else
      = haml :'partials/user/offline_message', layout: false
