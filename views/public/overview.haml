= haml :'partials/user/twitter_img', layout: false

- content_for(:title, "#{@viewed_user.fullname}")

- content_for :scripts do
  %script{id:"dsq-count-scr", src:"//#{Settings.disqus.shortname}.disqus.com/count.js", defer: ""}
  :javascript
    $(function() {
      DISQUSWIDGETS.getCount({reset: true});
    });

  - if @viewed_user.is_public? || admin_authorized?
    %script{src: "/js/application.js"}
    :javascript
      $(function() {
        Application.init("#{@viewed_user.id}");
      });
    - if @stats[:specimens] && ( @stats[:specimens][:identified] > 0 || @stats[:specimens][:recorded] > 0 )
      %script{src: "/js/progress-bar.js"}
      %script{src: "/js/geochart-hierarchy.js"}
      %script{src: "//www.gstatic.com/charts/loader.js"}
      - recorded = @stats[:countries][:recorded].to_a.map{|a| [ a[0], country_name(a[0]), a[1] ] }.unshift(["Country", "Country Name", "Collected"])
      - identified = @stats[:countries][:identified].to_a.map{|a| [ a[0], country_name(a[0]), a[1] ] }.unshift(["Country", "Country Name", "Identified"])
      :javascript
        $(function() {
          ProgressBar.init("#{@viewed_user.identifier}");

          var countriesRecorded = #{recorded},
              countriesIdentified = #{identified},
              dateData = #{@stats[:activity_dates].to_a.unshift(["Year", "Identified", "Collected"])},
              recorded_region = "world",
              identified_region = "world",
              recorded_hierarchies = $.map(#{@stats[:countries][:recorded].keys}, function(i) {
                return [ancestors(GeoChartHierarchy, i)];
              }).filter(function (el) { return el; }),
              identified_hierarchies = $.map(#{@stats[:countries][:identified].keys}, function(i) {
                return [ancestors(GeoChartHierarchy, i)];
              }).filter(function (el) { return el; });

          function ancestors(array, id) {
            if (typeof array != 'undefined') {
              for (var i = 0; i < array.length; i++) {
                if (array[i].id == id) return [id];
                var a = ancestors(array[i].children, id);
                if (a != null) {
                  a.unshift(array[i].id);
                  return a;
                }
              }
            }
            return null;
          }

          function intersection() {
          	var result = [];
            var lists;

            if(arguments.length === 1) {
            	lists = arguments[0];
            } else {
            	lists = arguments;
            }

            for(var i = 0; i < lists.length; i++) {
            	var currentList = lists[i];
            	for(var y = 0; y < currentList.length; y++) {
              	var currentValue = currentList[y];
                if(result.indexOf(currentValue) === -1) {
                  if(lists.filter(function(obj) { return obj.indexOf(currentValue) == -1 }).length == 0) {
                    result.push(currentValue);
                  }
                }
              }
            }
            return result;
          }

          function drawVisualizations() {
            var chartData = google.visualization.arrayToDataTable(dateData),
                collectedMap = new google.visualization.GeoChart($('#map-collected')[0]),
                identifiedMap = new google.visualization.GeoChart($('#map-identified')[0]),
                chart = new google.visualization.ColumnChart($('#chart')[0]),
                chartOptions = {
                  title: '',
                  hAxis: {
                    title: 'Year',
                    format: '0000',
                    titleTextStyle: {
                      italic: false,
                      fontSize: 18,
                      bold: true
                    }
                  },
                  vAxis: {
                    title: '# specimens',
                    titleTextStyle: {
                      italic: false,
                      fontSize: 18,
                      bold: true
                    }
                  },
                  colors: ['#bce7fa', '#0071a4'],
                  chartArea: {
                    right: 130,
                    left: 60,
                  }
                },
                mapOptions = {
                  colorAxis: { colors: ['#bce7fa', '#0071a4'] },
                  legend: 'none'
                };

            google.visualization.events.addListener(chart, 'onmouseover', function(e) {
              if (e.row !== null) { $('#chart').css('cursor','pointer'); }
            });
            google.visualization.events.addListener(chart, 'onmouseout', function() { $('#chart').css('cursor','default'); });
            google.visualization.events.addListener(chart, 'select', function() {
              var sel = chart.getSelection()[0];
              if (typeof sel.row !== "undefined" && sel.row !== null) {
                var yr = chartData.getValue(sel.row, 0), label = chartData.getColumnLabel(sel.column);
                window.location = "/#{@viewed_user.identifier}/specimens?action=" + label.toLowerCase() + "&start_year=" + yr + "&end_year=" + (parseInt(yr, 10)+5);
              }
            });
            $.each([collectedMap, identifiedMap], function() {
              var label = (this === collectedMap) ? "collected" : "identified";
              google.visualization.events.addListener(this, 'regionClick', function(e) {
                window.location = "/#{@viewed_user.identifier}/specimens?action=" + label + "&country_code=" + e.region;
              });
            });

            if (dateData.length > 1) {
              chart.draw(chartData, chartOptions);
            }

          if (countriesRecorded.length > 1) {
            var intx = intersection(recorded_hierarchies);
            recorded_region = intx[intx.length - 1];
            collectedMap.draw(google.visualization.arrayToDataTable(countriesRecorded), $.extend(mapOptions, { "region": recorded_region }));
          } else {
            collectedMap.draw(google.visualization.arrayToDataTable([["None"]]), $.extend(mapOptions, { "region": recorded_region }));
          }

          if (countriesIdentified.length > 1) {
            var intx = intersection(identified_hierarchies);
            identified_region = intx[intx.length - 1];
            identifiedMap.draw(google.visualization.arrayToDataTable(countriesIdentified), $.extend(mapOptions, { "region": identified_region }));
          } else {
            identifiedMap.draw(google.visualization.arrayToDataTable([["None"]]), $.extend(mapOptions, { "region": identified_region }));
          }
          }

          google.charts.load('current', {
            packages: ['corechart', 'bar', 'geochart'],
            mapsApiKey: "#{Settings.google.api_key}"
          });
          google.charts.setOnLoadCallback(drawVisualizations);
        });

%div{class:"row"}
  = haml :'partials/user/jumbotron', layout: false, locals: { active_page: "overview" }
  %div{class:"col-12 col-lg-8 mt-2"}
    - if @viewed_user.is_public?
      = haml :'partials/user/tabs', layout: false, locals: { active_page: "overview" }

      %div{class:"d-flex flex-row mt-3 alert alert-info justify-content-between"}
        - if @stats[:specimens][:identified] == 0 && @stats[:specimens][:recorded] == 0 && @stats[:attributions][:helped] == 0
          Claims or attributions have not yet been recorded.
        - else
          %div
            %ul{class:"list-unstyled"}
              = haml :'partials/user_stats', layout: false

          - if @stats[:specimens][:recorded] > 0 || @stats[:specimens][:identified] > 0
            %div{class:"col-4 col-md-2"}
              Progress
              %div{class:"progress progress-border"}
                %div{id:"progress-bar_#{@viewed_user.identifier}", class:"progress-bar bg-info", role:"progressbar", style:"width: 0%;", "aria-valuenow":"0", "aria-valuemin":"0", "aria-valuemax":"100"}

      - if @stats[:specimens][:identified] > 0 || @stats[:specimens][:recorded] > 0
        %div{class:"row d-flex mt-3"}
          %div{class:"col-10 col-md-6"}
            %h4 Identified From
            #map-identified{style:"width: 100%; height: 350px"}
          %div{class:"col-10 col-md-6"}
            %h4 Collected From
            #map-collected{style:"width: 100%; height: 350px"}
      - else
        #map-identified{style:"width: 0%; height: 0%; display: none;"}
        #map-collected{style:"width: 0%; height: 0%; display: none;"}


      - if @stats[:activity_dates].length > 0
        %h4 Dates Identified and Collected
        %div{id: "chart"}
      - else
        %div{id: "chart", style:"width: 0%; height: 0%; display:none;"}

    - else
      = haml :'partials/user/offline_message', layout: false
